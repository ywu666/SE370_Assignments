se370 A2 Answers

Part 1 Q1: 
Terminal 2 result:
yoga@yoga-VirtualBox:~/Documents/A2$ ls -l source
total 12
-rw-rw-r-- 1 yoga yoga Oct 2   3 14:34 one
-rw-rw-r-- 1 yoga yoga Oct 2   3 14:34 three
-rw-rw-r-- 1 yoga yoga OCt 2   3 14:34 two
yoga@yoga-VirtualBox:~/Documents/A2$ ls -l mount
total 0
-rw-rw-r-- 1 yoga yoga Oct 2  3 14:34 one
-rw-rw-r-- 1 yoga yoga Oct 2  3 14:34 three
-rw-rw-r-- 1 yoga yoga Oct 2  3 14:34 two

The above shows the result of terminal 2. The files in the source folder is mounted to the mount point which is the mount folder. The total number here indicated  the number of file system blocks used by the directory. However, the only difference here is the total number of the source folder is 12, the total number of the mount folder is 0. This means the file generated inside the mount directory is in memory rather than the disk.
The first part shows the permissions of the users, group and others for that file. Then the second part is one, which indicate there is one hard link point to this file which is file itself. Then the thid part "yoga" indicate the owner and the group of the file. Then the fourth part is the modification time as well as the number of bytes in the file. Then the last part is the name of the file.

Part 1 Q2:
Terminal 1 Results:
cd mount:
DEBUG:fuse.log-mixin:-> getattr / (None,)
DEBUG:fuse.log-mixin:<- getattr {'st_atime': 1601798113.5335066, 'st_ctime': 1601798113.4055028, 'st_gid': 1000, 'st_mode': 16893, 'st_mtime': 1601706871.0, 'st_nlink': 2, 'st_size': 4096, 'st_uid': 1000}
DEBUG:fuse.log-mixin:-> access / (1,)
DEBUG:fuse.log-mixin:<- access None

cat > newfile:
DEBUG:fuse.log-mixin:-> getattr /newfile (None,)
DEBUG:fuse.log-mixin:<- getattr "[Errno 2] No such file or directory: 'source/newfile'"
DEBUG:fuse:FUSE operation getattr raised a <class 'FileNotFoundError'>, returning errno 2.
Traceback (most recent call last):
  File "/home/yoga/Documents/A2/fuse.py", line 731, in _wrapper
    return func(*args, **kwargs) or 0
  File "/home/yoga/Documents/A2/fuse.py", line 771, in getattr
    return self.fgetattr(path, buf, None)
  File "/home/yoga/Documents/A2/fuse.py", line 1024, in fgetattr
    attrs = self.operations('getattr', self._decode_optional_path(path), fh)
  File "/home/yoga/Documents/A2/fuse.py", line 1240, in __call__
    ret = getattr(self, op)(path, *args)
  File "/home/yoga/Documents/A2/passthrough.py", line 43, in getattr
    st = os.lstat(full_path)
FileNotFoundError: [Errno 2] No such file or directory: 'source/newfile'
DEBUG:fuse.log-mixin:-> create /newfile (33204,)
DEBUG:fuse.log-mixin:<- create 4
DEBUG:fuse.log-mixin:-> getattr /newfile (4,)
DEBUG:fuse.log-mixin:<- getattr {'st_atime': 1601797277.440076, 'st_ctime': 1601797277.440076, 'st_gid': 1000, 'st_mode': 33204, 'st_mtime': 1601797277.440076, 'st_nlink': 1, 'st_size': 0, 'st_uid': 1000}
DEBUG:fuse.log-mixin:-> flush /newfile (4,)
DEBUG:fuse.log-mixin:<- flush None

hello world:
DEBUG:fuse.log-mixin:-> write /newfile (b'hello world\n', 0, 4)
DEBUG:fuse.log-mixin:<- write 12

^D:
DEBUG:fuse.log-mixin:-> flush /newfile (4,)
DEBUG:fuse.log-mixin:<- flush None
DEBUG:fuse.log-mixin:-> release /newfile (4,)
DEBUG:fuse.log-mixin:<- release None

cd ../:
DEBUG:fuse.log-mixin:-> getattr / (None,)
DEBUG:fuse.log-mixin:<- getattr {'st_atime': 1601795862.097616, 'st_ctime': 1601797277.440076, 'st_gid': 1000, 'st_mode': 16893, 'st_mtime': 1601797277.440076, 'st_nlink': 2, 'st_size': 4096, 'st_uid': 1000}

fusermount-u mount:
DEBUG:fuse.log-mixin:-> destroy / ()
DEBUG:fuse.log-mixin:<- destroy None

Terminal 2 result:
yoga@yoga-VirtualBox:~/Downloads/A2$ ls -l mount
total 0
yoga@yoga-VirtualBox:~/Downloads/A2$ ls -l source
total 16
-rw-rw-r-- 1 yoga yoga  Oct 12 4 15:42 newfile
-rw-rw-r-- 1 yoga yoga  Oct 2  3 14:34 one
-rw-rw-r-- 1 yoga yoga  Oct 2  3 14:34 three
-rw-rw-r-- 1 yoga yoga  Oct 2  3 14:34 two

Part 2 Q3:
__init__ : 
Creates an empty dictionary self.files for the files. This will use the path names as the keys. Each value in the dictionary will be another dictionary. self.data is a dictionary for the files’ data. The path names are the keys. The values are the data of that file. Sets the starting value for the file descriptors, these are going to be used as unique file identifiers.
Grabs the current time and sets the file attributes for the root of this file system. It is a directory, with creation, modified and accessed times set to now. It has two links.

getattr: 
Provide the path name as the key, if the path name exist, then find the corresponding file in the self.files dictionary and return all the attributes. Otherwise, throw an fuseOS error that indicates “No such file or directory” to users.

readdir: 
For each file in the list of files in the current object, let's just consider those that are not called '/'. Then for the files that satisfy this condition, remove the first character in the file's name. Then put the result in a new list, and join [".",".."] with the new list.The list [".", ".."] contains with the current working directory and the parent directory, respecticely.

open: 
Open a new file and increase the file descriptor by 1 and then return the new file descriptor.

create: 
Create a new file in self.files dictionary by using the path name that provided by the user. Then set the file attributes of the new file. It is a regular file, with creation, modified and accessed times set to time() and method time() returns the time as a floating point number expressed in seconds since the epoch, in UTC. And the new file will have one link.

unlink:
This method will remove the file with the path name that provided by the user from the self.files dictionary. 

write: 
Using the path name as a key to find the data of corresponding file in the self.data dictionary. Then based on the provided offset (write pointer in the file)  and write the new data into the file.
Then renew that corresponding file’s attribute – size of the file  by using the path name in the self.files dictionary. 
At last, Return the length of the new data.

read: 
Finding the file that need to read in the self.data dictionary by using the path name as the key, then using the offset and the size to define how many data the user want to read from the file.
